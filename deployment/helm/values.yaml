# Default values for ecommerce-vti
# This is a YAML-formatted file.

global:
  imageRegistry: ""
  imagePullSecrets: []

# Application configuration
app:
  name: ecommerce-vti
  environment: development

# Image configuration
image:
  registry: 234139188789.dkr.ecr.ap-southeast-2.amazonaws.com
  repository: de000079-ecr-repo-dev
  tag: "latest"
  pullPolicy: Always

# Backend application
backend:
  name: backend-app
  replicaCount: 1  # Reduced for stability
  image:
    name: backend
  service:
    type: ClusterIP
    port: 9000
    targetPort: 9000
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  # Temporarily disable health checks for troubleshooting
  # livenessProbe:
  #   exec:
  #     command:
  #       - php-fpm-healthcheck
  #   initialDelaySeconds: 60
  #   periodSeconds: 30
  #   timeoutSeconds: 10
  #   failureThreshold: 3
  # readinessProbe:
  #   exec:
  #     command:
  #       - php-fpm-healthcheck
  #   initialDelaySeconds: 30
  #   periodSeconds: 10
  #   timeoutSeconds: 5
  #   failureThreshold: 3

# Frontend application
frontend:
  name: frontend-app
  replicaCount: 1  # Reduced for stability
  image:
    name: frontend
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  livenessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 60  # Increased delay for Next.js startup
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Worker services
horizon:
  name: horizon-worker
  replicaCount: 1
  image:
    name: horizon
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

scheduler:
  name: scheduler-worker
  replicaCount: 1
  image:
    name: scheduler
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Database (PostgreSQL)
postgresql:
  name: postgres-prod
  replicaCount: 1
  image:
    repository: postgres
    tag: "15-alpine"
  service:
    type: ClusterIP
    port: 5432
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  persistence:
    enabled: true
    size: 10Gi
    storageClass: gp2
  env:
    POSTGRES_DB: ecommerce_vti_dev
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: devpassword123

# Redis
redis:
  name: redis-prod
  replicaCount: 1
  image:
    repository: redis
    tag: "7-alpine"
  service:
    type: ClusterIP
    port: 6379
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# External Secrets configuration
externalSecrets:
  enabled: true
  backend:
    secretName: backend-secrets
    awsSecretName: DE000079-ecommerce-vti-backend-dev
  frontend:
    secretName: frontend-secrets
    awsSecretName: DE000079-ecommerce-vti-frontend-dev
  secretStore:
    name: aws-secret-store
    region: ap-southeast-2
    serviceAccount: external-secrets-sa
    roleArn: arn:aws:iam::234139188789:role/external-secrets-dev-role

# Service Account
serviceAccount:
  create: true
  name: external-secrets-sa
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::234139188789:role/external-secrets-dev-role

# ConfigMap configuration
configMap:
  backend:
    APP_ENV: development
    APP_DEBUG: "true"
    LOG_CHANNEL: stderr
    DB_CONNECTION: pgsql
    DB_HOST: postgres-service
    DB_PORT: "5432"
    DB_DATABASE: ecommerce_vti_dev
    DB_USERNAME: postgres
    BROADCAST_DRIVER: log
    CACHE_DRIVER: redis
    FILESYSTEM_DISK: local
    QUEUE_CONNECTION: redis
    SESSION_DRIVER: redis
    SESSION_LIFETIME: "120"
    REDIS_HOST: redis-service
    REDIS_PASSWORD: null
    REDIS_PORT: "6379"
  frontend:
    NODE_ENV: production
    NEXT_TELEMETRY_DISABLED: "1"

# Load Balancer Services (No domain required)
loadBalancer:
  enabled: true
  backend:
    type: LoadBalancer
    port: 80
    targetPort: 9000
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: nlb
      service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      service.beta.kubernetes.io/aws-load-balancer-attributes: idle_timeout.idle_timeout_seconds=60
  frontend:
    type: LoadBalancer
    port: 80
    targetPort: 3000
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: nlb
      service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
      service.beta.kubernetes.io/aws-load-balancer-attributes: idle_timeout.idle_timeout_seconds=60

# Alternative: NodePort Services (for direct access without Load Balancer)
nodePort:
  enabled: false  # Set to true if you prefer NodePort over LoadBalancer
  backend:
    type: NodePort
    port: 80
    targetPort: 9000
    nodePort: 30080  # Access via <node-ip>:30080
  frontend:
    type: NodePort
    port: 80
    targetPort: 3000
    nodePort: 30090  # Access via <node-ip>:30090

# Namespace
namespace:
  create: true
  name: ecommerce-vti
