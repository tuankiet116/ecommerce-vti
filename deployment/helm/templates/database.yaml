apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.postgresql.name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "ecommerce-vti.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  replicas: {{ .Values.postgresql.replicaCount }}
  selector:
    matchLabels:
      {{- include "ecommerce-vti.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        {{- include "ecommerce-vti.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
    spec:
      containers:
        - name: postgres
          image: {{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}
          imagePullPolicy: Always
          ports:
            - name: postgres
              containerPort: {{ .Values.postgresql.service.port }}
              protocol: TCP
          env:
            {{- range $key, $value := .Values.postgresql.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U postgres -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
          resources:
            {{- toYaml .Values.postgresql.resources | nindent 12 }}
          {{- if .Values.postgresql.persistence.enabled }}
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          {{- end }}
      {{- if .Values.postgresql.persistence.enabled }}
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "ecommerce-vti.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  type: {{ .Values.postgresql.service.type }}
  ports:
    - port: {{ .Values.postgresql.service.port }}
      targetPort: {{ .Values.postgresql.service.port }}
      protocol: TCP
  selector:
    {{- include "ecommerce-vti.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: database
---
{{- if .Values.postgresql.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "ecommerce-vti.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgresql.persistence.size }}
  {{- if .Values.postgresql.persistence.storageClass }}
  storageClassName: {{ .Values.postgresql.persistence.storageClass }}
  {{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.redis.name }}
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "ecommerce-vti.labels" . | nindent 4 }}
    app.kubernetes.io/component: cache
spec:
  replicas: {{ .Values.redis.replicaCount }}
  selector:
    matchLabels:
      {{- include "ecommerce-vti.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        {{- include "ecommerce-vti.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: cache
    spec:
      containers:
        - name: redis
          image: {{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}
          imagePullPolicy: Always
          ports:
            - name: redis
              containerPort: {{ .Values.redis.service.port }}
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.redis.resources | nindent 12 }}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: {{ .Values.namespace.name }}
  labels:
    {{- include "ecommerce-vti.labels" . | nindent 4 }}
    app.kubernetes.io/component: cache
spec:
  type: {{ .Values.redis.service.type }}
  ports:
    - port: {{ .Values.redis.service.port }}
      targetPort: {{ .Values.redis.service.port }}
      protocol: TCP
  selector:
    {{- include "ecommerce-vti.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: cache
