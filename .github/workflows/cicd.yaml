name: CI/CD Pipeline with Helm

on:
    push:
        branches: [main, staging]
    pull_request:
        branches: [main, staging]

env:
    AWS_REGION: ap-southeast-2
    AWS_ACCOUNT_ID: 234139188789

jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.4"
                  extensions: pdo, pdo_pgsql, mbstring, zip, bcmath, pcntl

            - name: Install backend dependencies
              working-directory: ./backend
              run: composer install --prefer-dist --no-progress --no-suggest

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9.0.0

            - name: Install frontend dependencies
              working-directory: ./frontend
              run: pnpm install --frozen-lockfile

            - name: Run backend tests
              working-directory: ./backend
              run: |
                  cp .env.example .env
                  php artisan key:generate
                  vendor/bin/phpunit

            - name: Build frontend
              working-directory: ./frontend
              run: pnpm build

    build-and-deploy:
        name: Build and Deploy with Helm
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
        environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        permissions:
            id-token: write
            contents: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Determine environment
              id: env
              run: |
                  if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                    echo "environment=prod" >> $GITHUB_OUTPUT
                    echo "namespace=ecommerce-vti-prod" >> $GITHUB_OUTPUT
                    echo "backend_secret_name=${{ secrets.BACKEND_SECRET_NAME }}" >> $GITHUB_OUTPUT
                    echo "frontend_secret_name=${{ secrets.FRONTEND_SECRET_NAME }}" >> $GITHUB_OUTPUT
                  else
                    echo "environment=dev" >> $GITHUB_OUTPUT
                    echo "namespace=ecommerce-vti-dev" >> $GITHUB_OUTPUT
                    echo "backend_secret_name=${{ secrets.BACKEND_SECRET_NAME }}" >> $GITHUB_OUTPUT
                    echo "frontend_secret_name=${{ secrets.FRONTEND_SECRET_NAME }}" >> $GITHUB_OUTPUT
                  fi
                  echo "aws_role_arn=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_OUTPUT
                  echo "ecr_repository=${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
                  echo "eks_cluster=${{ secrets.EKS_CLUSTER_NAME }}" >> $GITHUB_OUTPUT

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ steps.env.outputs.aws_role_arn }}
                  role-session-name: GitHubActions-${{ github.run_id }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build and push Docker images
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ steps.env.outputs.ecr_repository }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build and push backend images
                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG --target production .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG

                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:horizon-$IMAGE_TAG --target horizon .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:horizon-$IMAGE_TAG

                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:scheduler-$IMAGE_TAG --target scheduler .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:scheduler-$IMAGE_TAG

                  # Build and push frontend image
                  docker build -f deployment/docker/frontend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG

            - name: Setup Helm
              uses: azure/setup-helm@v4
              with:
                  version: "v3.12.0"

            - name: Setup Kubernetes and External Secrets
              env:
                  EKS_CLUSTER: ${{ steps.env.outputs.eks_cluster }}
              run: |
                  # Update kubeconfig
                  aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

                  # Check cluster connectivity
                  echo "Testing cluster connectivity..."
                  kubectl cluster-info

                  # Add External Secrets Helm repo
                  helm repo add external-secrets https://charts.external-secrets.io
                  helm repo update

                  # Check if External Secrets Operator is installed and working
                  echo "Checking External Secrets Operator status..."
                  if kubectl get namespace external-secrets-system &> /dev/null; then
                    echo "External Secrets namespace exists, checking deployment..."
                    if kubectl get deployment external-secrets -n external-secrets-system &> /dev/null; then
                      echo "External Secrets deployment exists, checking if ready..."
                      if kubectl wait --for=condition=available deployment/external-secrets -n external-secrets-system --timeout=30s; then
                        echo "External Secrets is ready"
                      else
                        echo "External Secrets deployment not ready, reinstalling..."
                        helm uninstall external-secrets -n external-secrets-system || true
                        kubectl delete namespace external-secrets-system --timeout=60s || true
                        sleep 10
                        helm install external-secrets external-secrets/external-secrets \
                          -n external-secrets-system \
                          --create-namespace \
                          --wait \
                          --timeout=10m
                      fi
                    else
                      echo "External Secrets deployment missing, installing..."
                      helm install external-secrets external-secrets/external-secrets \
                        -n external-secrets-system \
                        --create-namespace \
                        --wait \
                        --timeout=10m
                    fi
                  else
                    echo "Installing External Secrets Operator..."
                    helm install external-secrets external-secrets/external-secrets \
                      -n external-secrets-system \
                      --create-namespace \
                      --wait \
                      --timeout=10m
                  fi

                  # Verify CRDs are properly installed and ready
                  echo "Verifying External Secrets CRDs..."
                  for i in {1..10}; do
                    if kubectl get crd externalsecrets.external-secrets.io secretstores.external-secrets.io &> /dev/null; then
                      echo "CRDs found, waiting for them to be established..."
                      if kubectl wait --for condition=established --timeout=60s \
                        crd/externalsecrets.external-secrets.io \
                        crd/secretstores.external-secrets.io; then
                        echo "All CRDs are ready!"
                        break
                      fi
                    fi
                    
                    if [ $i -eq 10 ]; then
                      echo "CRDs not ready after 10 attempts, listing available CRDs..."
                      kubectl get crd | grep external-secrets || echo "No external-secrets CRDs found"
                      echo "Forcing reinstall of External Secrets Operator..."
                      helm uninstall external-secrets -n external-secrets-system || true
                      kubectl delete namespace external-secrets-system --timeout=60s || true
                      sleep 10
                      helm install external-secrets external-secrets/external-secrets \
                        -n external-secrets-system \
                        --create-namespace \
                        --wait \
                        --timeout=10m
                      kubectl wait --for condition=established --timeout=300s \
                        crd/externalsecrets.external-secrets.io \
                        crd/secretstores.external-secrets.io
                      break
                    fi
                    
                    echo "Attempt $i: CRDs not ready, waiting 10 seconds..."
                    sleep 10
                  done

                  # Final verification
                  echo "Final CRDs verification:"
                  kubectl get crd | grep external-secrets
                  echo "External Secrets pods:"
                  kubectl get pods -n external-secrets-system

            - name: Deploy with Helm
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ steps.env.outputs.ecr_repository }}
                  IMAGE_TAG: ${{ github.sha }}
                  ENVIRONMENT: ${{ steps.env.outputs.environment }}
                  NAMESPACE: ${{ steps.env.outputs.namespace }}
                  BACKEND_SECRET_NAME: ${{ steps.env.outputs.backend_secret_name }}
                  FRONTEND_SECRET_NAME: ${{ steps.env.outputs.frontend_secret_name }}
              run: |
                  cd deployment/helm

                  # Pre-deployment verification
                  echo "=== Pre-deployment verification ==="
                  echo "Checking External Secrets CRDs..."
                  kubectl get crd | grep external-secrets

                  echo "Checking External Secrets Operator pods..."
                  kubectl get pods -n external-secrets-system

                  echo "Testing CRD access..."
                  kubectl api-resources | grep external-secrets

                  # Debug: Template validation without CRDs dependency
                  echo "=== Validating Helm templates ==="
                  helm template ecommerce-vti . \
                    --values ./values.yaml \
                    --values ./values-$ENVIRONMENT.yaml \
                    --set image.tag=$IMAGE_TAG \
                    --set image.repository=$ECR_REPOSITORY \
                    --set namespace.name=$NAMESPACE \
                    --set externalSecrets.backend.awsSecretName=$BACKEND_SECRET_NAME \
                    --set externalSecrets.frontend.awsSecretName=$FRONTEND_SECRET_NAME \
                    --debug > /tmp/helm-template-output.yaml

                  echo "Generated templates preview (first 50 lines):"
                  head -50 /tmp/helm-template-output.yaml

                  # Deploy using Helm with enhanced error handling
                  echo "=== Starting Helm deployment ==="
                  if ! helm upgrade --install ecommerce-vti . \
                    --namespace $NAMESPACE \
                    --create-namespace \
                    --values ./values.yaml \
                    --values ./values-$ENVIRONMENT.yaml \
                    --set image.tag=$IMAGE_TAG \
                    --set image.repository=$ECR_REPOSITORY \
                    --set namespace.name=$NAMESPACE \
                    --set externalSecrets.backend.awsSecretName=$BACKEND_SECRET_NAME \
                    --set externalSecrets.frontend.awsSecretName=$FRONTEND_SECRET_NAME \
                    --wait \
                    --timeout=10m \
                    --debug; then
                    
                    echo "=== Helm deployment failed, gathering debug info ==="
                    echo "Helm status:"
                    helm status ecommerce-vti -n $NAMESPACE || echo "No release found"
                    
                    echo "Checking for failed resources:"
                    kubectl get events -n $NAMESPACE --sort-by='.lastTimestamp' | tail -20
                    
                    echo "Namespace resources:"
                    kubectl get all -n $NAMESPACE || echo "Namespace might not exist"
                    
                    echo "CRDs status after failed deployment:"
                    kubectl get crd | grep external-secrets
                    
                    exit 1
                  fi

                  # Wait for main deployments to be ready
                  echo "=== Waiting for deployments to be ready ==="
                  kubectl wait --for=condition=available --timeout=600s deployment/backend-app -n $NAMESPACE
                  kubectl wait --for=condition=available --timeout=600s deployment/frontend-app -n $NAMESPACE

            - name: Deployment summary
              env:
                  ENVIRONMENT: ${{ steps.env.outputs.environment }}
                  NAMESPACE: ${{ steps.env.outputs.namespace }}
              run: |
                  echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
                  echo "- **Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
                  echo "- **Namespace:** $NAMESPACE" >> $GITHUB_STEP_SUMMARY
                  echo "- **Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Helm Release:** ecommerce-vti" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  echo "### 📊 Application Status" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  kubectl get pods -n $NAMESPACE >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  echo "### 🎯 Helm Release Info" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  helm list -n $NAMESPACE >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  echo "### 🌐 Access URLs (No Domain Required)" >> $GITHUB_STEP_SUMMARY
                  echo "Wait a few minutes for Load Balancers to provision, then:" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  # Get Load Balancer URLs
                  echo "**Frontend Application:**" >> $GITHUB_STEP_SUMMARY
                  FRONTEND_LB=$(kubectl get service frontend-loadbalancer -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Provisioning...")
                  if [ "$FRONTEND_LB" != "Provisioning..." ] && [ ! -z "$FRONTEND_LB" ]; then
                    echo "- Frontend: http://$FRONTEND_LB" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "- Frontend: Load Balancer URL will be available in ~3-5 minutes" >> $GITHUB_STEP_SUMMARY
                    echo "  Run: \`kubectl get service frontend-loadbalancer -n $NAMESPACE\`" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "" >> $GITHUB_STEP_SUMMARY

                  echo "**Backend API:**" >> $GITHUB_STEP_SUMMARY
                  BACKEND_LB=$(kubectl get service backend-loadbalancer -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Provisioning...")
                  if [ "$BACKEND_LB" != "Provisioning..." ] && [ ! -z "$BACKEND_LB" ]; then
                    echo "- API: http://$BACKEND_LB" >> $GITHUB_STEP_SUMMARY
                    echo "- API Docs: http://$BACKEND_LB/docs" >> $GITHUB_STEP_SUMMARY
                    echo "- Admin Panel: http://$BACKEND_LB/admin" >> $GITHUB_STEP_SUMMARY
                    echo "- Horizon: http://$BACKEND_LB/horizon" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "- API: Load Balancer URL will be available in ~3-5 minutes" >> $GITHUB_STEP_SUMMARY
                    echo "  Run: \`kubectl get service backend-loadbalancer -n $NAMESPACE\`" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "" >> $GITHUB_STEP_SUMMARY

                  echo "### 📋 Manual Commands to Get URLs" >> $GITHUB_STEP_SUMMARY
                  echo '```bash' >> $GITHUB_STEP_SUMMARY
                  echo "# Get Frontend URL" >> $GITHUB_STEP_SUMMARY
                  echo "kubectl get service frontend-loadbalancer -n $NAMESPACE" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "# Get Backend URL" >> $GITHUB_STEP_SUMMARY
                  echo "kubectl get service backend-loadbalancer -n $NAMESPACE" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "# Alternative: Port forward for testing" >> $GITHUB_STEP_SUMMARY
                  echo "kubectl port-forward service/frontend-service 3000:3000 -n $NAMESPACE" >> $GITHUB_STEP_SUMMARY
                  echo "kubectl port-forward service/backend-service 8000:9000 -n $NAMESPACE" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
