name: CI/CD Pipeline

on:
    push:
        branches: [main, staging]
    pull_request:
        branches: [main, staging]

env:
    AWS_REGION: ap-southeast-2
    AWS_ACCOUNT_ID: 234139188789

jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.4"
                  extensions: pdo, pdo_pgsql, mbstring, zip, bcmath, pcntl

            - name: Cache Composer dependencies
              uses: actions/cache@v3
              with:
                  path: backend/vendor
                  key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Install backend dependencies
              working-directory: ./backend
              run: composer install --prefer-dist --no-progress --no-suggest

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9.0.0

            - name: Get pnpm store directory
              id: pnpm-cache
              working-directory: ./frontend
              run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

            - name: Cache pnpm store
              uses: actions/cache@v3
              with:
                  path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
                  restore-keys: ${{ runner.os }}-pnpm-store-

            - name: Install frontend dependencies
              working-directory: ./frontend
              run: pnpm install --frozen-lockfile

            - name: Run backend tests
              working-directory: ./backend
              run: |
                  cp .env.example .env
                  php artisan key:generate
                  vendor/bin/phpunit

            - name: Build frontend
              working-directory: ./frontend
              run: pnpm build

    build-and-deploy:
        name: Build and Deploy
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
        environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        permissions:
            id-token: write
            contents: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Determine environment
              id: env
              run: |
                  echo "=== Debug Info ==="
                  echo "Current ref: ${{ github.ref }}"
                  echo "Branch: ${{ github.ref_name }}"

                  if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                    echo "environment=prod" >> $GITHUB_OUTPUT
                    echo "aws_role_arn=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_OUTPUT
                    echo "ecr_repository=${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
                    echo "eks_cluster=${{ secrets.EKS_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
                    echo "namespace=${{ secrets.NAMESPACE }}" >> $GITHUB_OUTPUT
                    echo "backend_secrets=${{ secrets.BACKEND_SECRET_NAME }}" >> $GITHUB_OUTPUT
                    echo "frontend_secrets=${{ secrets.FRONTEND_SECRET_NAME }}" >> $GITHUB_OUTPUT
                    
                    echo "Selected: PROD environment"
                    echo "ECR Repository: ${{ secrets.ECR_REPOSITORY }}"
                  else
                    echo "environment=dev" >> $GITHUB_OUTPUT
                    echo "aws_role_arn=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_OUTPUT
                    echo "ecr_repository=${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
                    echo "eks_cluster=${{ secrets.EKS_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
                    echo "namespace=${{ secrets.NAMESPACE }}" >> $GITHUB_OUTPUT
                    echo "backend_secrets=${{ secrets.BACKEND_SECRET_NAME }}" >> $GITHUB_OUTPUT
                    echo "frontend_secrets=${{ secrets.FRONTEND_SECRET_NAME }}" >> $GITHUB_OUTPUT
                    
                    echo "Selected: DEV environment"
                    echo "ECR Repository: ${{ secrets.ECR_REPOSITORY }}"
                  fi

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ steps.env.outputs.aws_role_arn }}
                  role-session-name: GitHubActions-${{ github.run_id }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Debug build variables
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ steps.env.outputs.ecr_repository }}
                  IMAGE_TAG: ${{ github.sha }}
                  ENVIRONMENT: ${{ steps.env.outputs.environment }}
              run: |
                  echo "=== Build Variables Debug ==="
                  echo "ECR_REGISTRY: $ECR_REGISTRY"
                  echo "ECR_REPOSITORY: $ECR_REPOSITORY"
                  echo "IMAGE_TAG: $IMAGE_TAG"
                  echo "ENVIRONMENT: $ENVIRONMENT"
                  echo "=========================="

            - name: Build and tag Docker images
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ steps.env.outputs.ecr_repository }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Check if ECR_REPOSITORY is set
                  if [ -z "$ECR_REPOSITORY" ]; then
                    echo "ERROR: ECR_REPOSITORY is empty!"
                    echo "Make sure GitHub Secret is set correctly"
                    exit 1
                  fi

                  # Build backend images
                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG --target production .
                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:horizon-$IMAGE_TAG --target horizon .
                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:scheduler-$IMAGE_TAG --target scheduler .

                  # Build frontend image
                  docker build -f deployment/docker/frontend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG .

            - name: Push images to ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ steps.env.outputs.ecr_repository }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:horizon-$IMAGE_TAG
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:scheduler-$IMAGE_TAG
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG

            - name: Update Kubernetes manifests
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ steps.env.outputs.ecr_repository }}
                  IMAGE_TAG: ${{ github.sha }}
                  ENVIRONMENT: ${{ steps.env.outputs.environment }}
                  BACKEND_SECRETS: ${{ steps.env.outputs.backend_secrets }}
                  FRONTEND_SECRETS: ${{ steps.env.outputs.frontend_secrets }}
                  NAMESPACE: ${{ steps.env.outputs.namespace }}
              run: |
                  # Update kustomization with new image tags
                  cd deployment/k8s/environments/$ENVIRONMENT

                  # Update image tags in kustomization.yaml
                  sed -i "s|backend-latest|backend-$IMAGE_TAG|g" kustomization.yaml
                  sed -i "s|horizon-latest|horizon-$IMAGE_TAG|g" kustomization.yaml
                  sed -i "s|scheduler-latest|scheduler-$IMAGE_TAG|g" kustomization.yaml
                  sed -i "s|frontend-latest|frontend-$IMAGE_TAG|g" kustomization.yaml

                  # Update secrets names in external-secrets.yaml
                  sed -i "s|BACKEND_SECRETS_NAME|$BACKEND_SECRETS|g" ../../base/external-secrets.yaml
                  sed -i "s|FRONTEND_SECRETS_NAME|$FRONTEND_SECRETS|g" ../../base/external-secrets.yaml

                  # Update other placeholders based on environment
                  if [[ "$ENVIRONMENT" == "prod" ]]; then
                    # Production domains and settings (commented out until domains are ready)
                    # sed -i "s|FRONTEND_DOMAIN|app.ecommerce-vti.com|g" ../../base/ingress.yaml
                    # sed -i "s|BACKEND_DOMAIN|api.ecommerce-vti.com|g" ../../base/ingress.yaml
                    # sed -i "s|CERTIFICATE_ARN|arn:aws:acm:ap-southeast-2:234139188789:certificate/your-prod-cert-id|g" ../../base/ingress.yaml
                    sed -i "s|EXTERNAL_SECRETS_ROLE_ARN|arn:aws:iam::234139188789:role/external-secrets-prod-role|g" ../../base/serviceaccount.yaml
                  else
                    # Development domains and settings (commented out until domains are ready) 
                    # sed -i "s|FRONTEND_DOMAIN|dev.ecommerce-vti.com|g" ../../base/ingress.yaml
                    # sed -i "s|BACKEND_DOMAIN|api-dev.ecommerce-vti.com|g" ../../base/ingress.yaml
                    # sed -i "s|CERTIFICATE_ARN|arn:aws:acm:ap-southeast-2:234139188789:certificate/your-dev-cert-id|g" ../../base/ingress.yaml
                    sed -i "s|EXTERNAL_SECRETS_ROLE_ARN|arn:aws:iam::234139188789:role/external-secrets-dev-role|g" ../../base/serviceaccount.yaml
                  fi

                  # Update namespace in kustomization.yaml
                  sed -i "s|namespace: ecommerce-vti|namespace: $NAMESPACE|g" kustomization.yaml

            - name: Deploy to EKS
              env:
                  EKS_CLUSTER: ${{ steps.env.outputs.eks_cluster }}
                  ENVIRONMENT: ${{ steps.env.outputs.environment }}
                  NAMESPACE: ${{ steps.env.outputs.namespace }}
              run: |
                  # Update kubeconfig
                  aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

                  # Install external-secrets operator if not exists
                  if ! kubectl get namespace external-secrets-system &> /dev/null; then
                    echo "Installing External Secrets Operator..."
                    helm repo add external-secrets https://charts.external-secrets.io
                    helm repo update
                    helm install external-secrets external-secrets/external-secrets -n external-secrets-system --create-namespace --wait --timeout=10m
                    
                    # Wait for deployment to be ready
                    echo "Waiting for External Secrets Operator to be ready..."
                    kubectl wait --for=condition=available deployment/external-secrets -n external-secrets-system --timeout=600s
                    kubectl wait --for=condition=available deployment/external-secrets-webhook -n external-secrets-system --timeout=600s
                    kubectl wait --for=condition=available deployment/external-secrets-cert-controller -n external-secrets-system --timeout=600s
                  else
                    echo "External Secrets Operator already exists"
                    # Check if it's healthy
                    kubectl get pods -n external-secrets-system
                  fi

                  # Ensure External Secrets CRDs are installed and ready
                  echo "Checking External Secrets CRDs..."
                  if ! kubectl get crd externalsecrets.external-secrets.io &> /dev/null; then
                    echo "Installing External Secrets CRDs..."
                    kubectl apply -f https://raw.githubusercontent.com/external-secrets/external-secrets/main/deploy/crds/bundle.yaml
                  fi

                  if ! kubectl get crd secretstores.external-secrets.io &> /dev/null; then
                    echo "Installing SecretStore CRDs..."
                    kubectl apply -f https://raw.githubusercontent.com/external-secrets/external-secrets/main/deploy/crds/bundle.yaml
                  fi

                  # Wait for External Secrets CRDs to be ready with retries
                  echo "Waiting for External Secrets CRDs to be available..."
                  for i in {1..10}; do
                    if kubectl wait --for condition=established --timeout=60s crd/externalsecrets.external-secrets.io crd/secretstores.external-secrets.io; then
                      echo "CRDs are ready!"
                      break
                    else
                      echo "CRDs not ready yet, retrying ($i/10)..."
                      if [ $i -eq 10 ]; then
                        echo "Failed to establish CRDs after 10 attempts"
                        kubectl get crd | grep external-secrets || echo "No external-secrets CRDs found"
                        exit 1
                      fi
                      sleep 10
                    fi
                  done

                  # Verify CRDs are actually working
                  echo "Verifying CRDs functionality..."
                  kubectl api-resources | grep external-secrets || {
                    echo "ERROR: External Secrets API resources not available"
                    exit 1
                  }

                  # Deploy application
                  cd deployment/k8s
                  kubectl kustomize environments/$ENVIRONMENT --load-restrictor=LoadRestrictionsNone | kubectl apply -f -

                  # Wait for deployments
                  kubectl wait --for=condition=available --timeout=600s deployment/backend-app -n $NAMESPACE
                  kubectl wait --for=condition=available --timeout=600s deployment/frontend-app -n $NAMESPACE
                  kubectl wait --for=condition=available --timeout=600s deployment/horizon-worker -n $NAMESPACE
                  kubectl wait --for=condition=available --timeout=600s deployment/scheduler-worker -n $NAMESPACE

            - name: Deployment summary
              env:
                  ENVIRONMENT: ${{ steps.env.outputs.environment }}
                  NAMESPACE: ${{ steps.env.outputs.namespace }}
              run: |
                  echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
                  echo "- **Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
                  echo "- **Namespace:** $NAMESPACE" >> $GITHUB_STEP_SUMMARY
                  echo "- **Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  echo "### 🌐 Application URLs" >> $GITHUB_STEP_SUMMARY
                  echo "**Frontend:**" >> $GITHUB_STEP_SUMMARY
                  FRONTEND_URL=$(kubectl get svc frontend-loadbalancer -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Pending...")
                  if [[ "$FRONTEND_URL" != "Pending..." ]]; then
                    echo "- http://$FRONTEND_URL" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "- LoadBalancer URL pending (check AWS console)" >> $GITHUB_STEP_SUMMARY
                  fi

                  echo "**Backend API:**" >> $GITHUB_STEP_SUMMARY
                  BACKEND_URL=$(kubectl get svc backend-loadbalancer -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Pending...")
                  if [[ "$BACKEND_URL" != "Pending..." ]]; then
                    echo "- http://$BACKEND_URL" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "- LoadBalancer URL pending (check AWS console)" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "" >> $GITHUB_STEP_SUMMARY

                  echo "### 📊 Application Status" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  kubectl get pods -n $NAMESPACE >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  echo "### 🔗 LoadBalancer Services" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  kubectl get svc -n $NAMESPACE -o wide >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
