name: CI/CD Pipeline with Helm

on:
    push:
        branches: [main, staging]
    pull_request:
        branches: [main, staging]

env:
    AWS_REGION: ap-southeast-2
    AWS_ACCOUNT_ID: 234139188789

jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: "8.4"
                  extensions: pdo, pdo_pgsql, mbstring, zip, bcmath, pcntl

            - name: Install backend dependencies
              working-directory: ./backend
              run: composer install --prefer-dist --no-progress --no-suggest

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Install pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: 9.0.0

            - name: Install frontend dependencies
              working-directory: ./frontend
              run: pnpm install --frozen-lockfile

            - name: Run backend tests
              working-directory: ./backend
              run: |
                  cp .env.example .env
                  php artisan key:generate
                  vendor/bin/phpunit

            - name: Build frontend
              working-directory: ./frontend
              run: pnpm build

    build-and-deploy:
        name: Build and Deploy with Helm
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
        environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        permissions:
            id-token: write
            contents: read

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Determine environment
              id: env
              run: |
                  if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                    echo "environment=prod" >> $GITHUB_OUTPUT
                    echo "namespace=ecommerce-vti-prod" >> $GITHUB_OUTPUT
                  else
                    echo "environment=dev" >> $GITHUB_OUTPUT
                    echo "namespace=ecommerce-vti-dev" >> $GITHUB_OUTPUT
                  fi
                  echo "aws_role_arn=${{ secrets.AWS_ROLE_ARN }}" >> $GITHUB_OUTPUT
                  echo "ecr_repository=${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
                  echo "eks_cluster=${{ secrets.EKS_CLUSTER_NAME }}" >> $GITHUB_OUTPUT

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ steps.env.outputs.aws_role_arn }}
                  role-session-name: GitHubActions-${{ github.run_id }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build and push Docker images
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ steps.env.outputs.ecr_repository }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build and push backend images
                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG --target production .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG

                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:horizon-$IMAGE_TAG --target horizon .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:horizon-$IMAGE_TAG

                  docker build -f deployment/docker/backend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:scheduler-$IMAGE_TAG --target scheduler .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:scheduler-$IMAGE_TAG

                  # Build and push frontend image
                  docker build -f deployment/docker/frontend.Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG

            - name: Setup Helm
              uses: azure/setup-helm@v4
              with:
                  version: 'v3.12.0'

            - name: Setup Kubernetes
              env:
                  EKS_CLUSTER: ${{ steps.env.outputs.eks_cluster }}
              run: |
                  # Update kubeconfig
                  aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER

                  # Install External Secrets Operator if not exists
                  if ! kubectl get namespace external-secrets-system &> /dev/null; then
                    echo "Installing External Secrets Operator..."
                    helm repo add external-secrets https://charts.external-secrets.io
                    helm repo update
                    helm install external-secrets external-secrets/external-secrets \
                      -n external-secrets-system \
                      --create-namespace \
                      --wait \
                      --timeout=10m
                    
                    echo "Waiting for External Secrets to be ready..."
                    kubectl wait --for=condition=available deployment -l app.kubernetes.io/name=external-secrets -n external-secrets-system --timeout=600s
                  else
                    echo "External Secrets Operator already exists"
                  fi

                  # Wait for CRDs to be ready
                  echo "Waiting for CRDs to be established..."
                  kubectl wait --for condition=established --timeout=300s crd/externalsecrets.external-secrets.io crd/secretstores.external-secrets.io

            - name: Deploy with Helm
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: ${{ steps.env.outputs.ecr_repository }}
                  IMAGE_TAG: ${{ github.sha }}
                  ENVIRONMENT: ${{ steps.env.outputs.environment }}
                  NAMESPACE: ${{ steps.env.outputs.namespace }}
              run: |
                  cd deployment/helm

                  # Deploy using Helm
                  helm upgrade --install ecommerce-vti . \
                    --namespace $NAMESPACE \
                    --create-namespace \
                    --values ./values.yaml \
                    --values ./values-$ENVIRONMENT.yaml \
                    --set image.tag=$IMAGE_TAG \
                    --set image.repository=$ECR_REPOSITORY \
                    --set namespace.name=$NAMESPACE \
                    --wait \
                    --timeout=10m

                  # Wait for main deployments to be ready
                  kubectl wait --for=condition=available --timeout=600s deployment/backend-app -n $NAMESPACE
                  kubectl wait --for=condition=available --timeout=600s deployment/frontend-app -n $NAMESPACE

            - name: Deployment summary
              env:
                  ENVIRONMENT: ${{ steps.env.outputs.environment }}
                  NAMESPACE: ${{ steps.env.outputs.namespace }}
              run: |
                  echo "## ðŸš€ Deployment Summary" >> $GITHUB_STEP_SUMMARY
                  echo "- **Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
                  echo "- **Namespace:** $NAMESPACE" >> $GITHUB_STEP_SUMMARY
                  echo "- **Commit SHA:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Helm Release:** ecommerce-vti" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  
                  echo "### ðŸ“Š Application Status" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  kubectl get pods -n $NAMESPACE >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  
                  echo "### ðŸŽ¯ Helm Release Info" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  helm list -n $NAMESPACE >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
